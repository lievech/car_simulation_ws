// Generated by gencpp from file vehicle_force_msgs/VehicleForce.msg
// DO NOT EDIT!


#ifndef VEHICLE_FORCE_MSGS_MESSAGE_VEHICLEFORCE_H
#define VEHICLE_FORCE_MSGS_MESSAGE_VEHICLEFORCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_force_msgs
{
template <class ContainerAllocator>
struct VehicleForce_
{
  typedef VehicleForce_<ContainerAllocator> Type;

  VehicleForce_()
    : frontlateralforce(0.0)
    , frontslipangle(0.0)
    , rearlateralforce(0.0)
    , rearslipangle(0.0)
    , frontlongitudinalforce(0.0)
    , rearlongitudinalforce(0.0)
    , vxdot(0.0)
    , deltadot(0.0)  {
    }
  VehicleForce_(const ContainerAllocator& _alloc)
    : frontlateralforce(0.0)
    , frontslipangle(0.0)
    , rearlateralforce(0.0)
    , rearslipangle(0.0)
    , frontlongitudinalforce(0.0)
    , rearlongitudinalforce(0.0)
    , vxdot(0.0)
    , deltadot(0.0)  {
  (void)_alloc;
    }



   typedef float _frontlateralforce_type;
  _frontlateralforce_type frontlateralforce;

   typedef float _frontslipangle_type;
  _frontslipangle_type frontslipangle;

   typedef float _rearlateralforce_type;
  _rearlateralforce_type rearlateralforce;

   typedef float _rearslipangle_type;
  _rearslipangle_type rearslipangle;

   typedef float _frontlongitudinalforce_type;
  _frontlongitudinalforce_type frontlongitudinalforce;

   typedef float _rearlongitudinalforce_type;
  _rearlongitudinalforce_type rearlongitudinalforce;

   typedef float _vxdot_type;
  _vxdot_type vxdot;

   typedef float _deltadot_type;
  _deltadot_type deltadot;





  typedef boost::shared_ptr< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleForce_

typedef ::vehicle_force_msgs::VehicleForce_<std::allocator<void> > VehicleForce;

typedef boost::shared_ptr< ::vehicle_force_msgs::VehicleForce > VehicleForcePtr;
typedef boost::shared_ptr< ::vehicle_force_msgs::VehicleForce const> VehicleForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_force_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_force_msgs': ['/home/lhn/hhh_ws/src/car_simulation_interface/msgs/vehicle_force_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2afff5c6ed09aa9fbd688ff68067a55";
  }

  static const char* value(const ::vehicle_force_msgs::VehicleForce_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2afff5c6ed09aa9ULL;
  static const uint64_t static_value2 = 0xfbd688ff68067a55ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_force_msgs/VehicleForce";
  }

  static const char* value(const ::vehicle_force_msgs::VehicleForce_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message decribes the forces of vehicle from road\n\
\n\
float32 frontlateralforce\n\
float32 frontslipangle\n\
float32 rearlateralforce\n\
float32 rearslipangle\n\
float32 frontlongitudinalforce\n\
float32 rearlongitudinalforce\n\
float32 vxdot\n\
float32 deltadot\n\
";
  }

  static const char* value(const ::vehicle_force_msgs::VehicleForce_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frontlateralforce);
      stream.next(m.frontslipangle);
      stream.next(m.rearlateralforce);
      stream.next(m.rearslipangle);
      stream.next(m.frontlongitudinalforce);
      stream.next(m.rearlongitudinalforce);
      stream.next(m.vxdot);
      stream.next(m.deltadot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleForce_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_force_msgs::VehicleForce_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_force_msgs::VehicleForce_<ContainerAllocator>& v)
  {
    s << indent << "frontlateralforce: ";
    Printer<float>::stream(s, indent + "  ", v.frontlateralforce);
    s << indent << "frontslipangle: ";
    Printer<float>::stream(s, indent + "  ", v.frontslipangle);
    s << indent << "rearlateralforce: ";
    Printer<float>::stream(s, indent + "  ", v.rearlateralforce);
    s << indent << "rearslipangle: ";
    Printer<float>::stream(s, indent + "  ", v.rearslipangle);
    s << indent << "frontlongitudinalforce: ";
    Printer<float>::stream(s, indent + "  ", v.frontlongitudinalforce);
    s << indent << "rearlongitudinalforce: ";
    Printer<float>::stream(s, indent + "  ", v.rearlongitudinalforce);
    s << indent << "vxdot: ";
    Printer<float>::stream(s, indent + "  ", v.vxdot);
    s << indent << "deltadot: ";
    Printer<float>::stream(s, indent + "  ", v.deltadot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_FORCE_MSGS_MESSAGE_VEHICLEFORCE_H
