// Generated by gencpp from file observer_msgs/observer.msg
// DO NOT EDIT!


#ifndef OBSERVER_MSGS_MESSAGE_OBSERVER_H
#define OBSERVER_MSGS_MESSAGE_OBSERVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace observer_msgs
{
template <class ContainerAllocator>
struct observer_
{
  typedef observer_<ContainerAllocator> Type;

  observer_()
    : header()
    , des_steering_angle(0.0)
    , cur_steering_angle(0.0)
    , lateral_error(0.0)
    , heading_error(0.0)
    , linear_v_x(0.0)
    , linear_v_y(0.0)
    , linear_v_z(0.0)
    , angular_v_x(0.0)
    , angular_v_y(0.0)
    , angular_v_z(0.0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , time_cost(0.0)  {
    }
  observer_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , des_steering_angle(0.0)
    , cur_steering_angle(0.0)
    , lateral_error(0.0)
    , heading_error(0.0)
    , linear_v_x(0.0)
    , linear_v_y(0.0)
    , linear_v_z(0.0)
    , angular_v_x(0.0)
    , angular_v_y(0.0)
    , angular_v_z(0.0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , time_cost(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _des_steering_angle_type;
  _des_steering_angle_type des_steering_angle;

   typedef double _cur_steering_angle_type;
  _cur_steering_angle_type cur_steering_angle;

   typedef double _lateral_error_type;
  _lateral_error_type lateral_error;

   typedef double _heading_error_type;
  _heading_error_type heading_error;

   typedef double _linear_v_x_type;
  _linear_v_x_type linear_v_x;

   typedef double _linear_v_y_type;
  _linear_v_y_type linear_v_y;

   typedef double _linear_v_z_type;
  _linear_v_z_type linear_v_z;

   typedef double _angular_v_x_type;
  _angular_v_x_type angular_v_x;

   typedef double _angular_v_y_type;
  _angular_v_y_type angular_v_y;

   typedef double _angular_v_z_type;
  _angular_v_z_type angular_v_z;

   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;

   typedef double _position_z_type;
  _position_z_type position_z;

   typedef double _acc_x_type;
  _acc_x_type acc_x;

   typedef double _acc_y_type;
  _acc_y_type acc_y;

   typedef double _acc_z_type;
  _acc_z_type acc_z;

   typedef float _time_cost_type;
  _time_cost_type time_cost;





  typedef boost::shared_ptr< ::observer_msgs::observer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::observer_msgs::observer_<ContainerAllocator> const> ConstPtr;

}; // struct observer_

typedef ::observer_msgs::observer_<std::allocator<void> > observer;

typedef boost::shared_ptr< ::observer_msgs::observer > observerPtr;
typedef boost::shared_ptr< ::observer_msgs::observer const> observerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::observer_msgs::observer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::observer_msgs::observer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace observer_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'observer_msgs': ['/home/lhn/hhh_ws/src/car_simulation_interface/msgs/observer_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::observer_msgs::observer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::observer_msgs::observer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::observer_msgs::observer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::observer_msgs::observer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::observer_msgs::observer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::observer_msgs::observer_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::observer_msgs::observer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2f52368ad4e8041253811aff6250629";
  }

  static const char* value(const ::observer_msgs::observer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2f52368ad4e8041ULL;
  static const uint64_t static_value2 = 0x253811aff6250629ULL;
};

template<class ContainerAllocator>
struct DataType< ::observer_msgs::observer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "observer_msgs/observer";
  }

  static const char* value(const ::observer_msgs::observer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::observer_msgs::observer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float64 des_steering_angle\n\
float64 cur_steering_angle\n\
\n\
float64 lateral_error\n\
float64 heading_error\n\
\n\
float64 linear_v_x\n\
float64 linear_v_y\n\
float64 linear_v_z\n\
\n\
float64 angular_v_x\n\
float64 angular_v_y\n\
float64 angular_v_z\n\
\n\
float64 position_x\n\
float64 position_y\n\
float64 position_z\n\
\n\
float64 acc_x\n\
float64 acc_y\n\
float64 acc_z\n\
\n\
float32 time_cost\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::observer_msgs::observer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::observer_msgs::observer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.des_steering_angle);
      stream.next(m.cur_steering_angle);
      stream.next(m.lateral_error);
      stream.next(m.heading_error);
      stream.next(m.linear_v_x);
      stream.next(m.linear_v_y);
      stream.next(m.linear_v_z);
      stream.next(m.angular_v_x);
      stream.next(m.angular_v_y);
      stream.next(m.angular_v_z);
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.time_cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct observer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::observer_msgs::observer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::observer_msgs::observer_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "des_steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.des_steering_angle);
    s << indent << "cur_steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.cur_steering_angle);
    s << indent << "lateral_error: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_error);
    s << indent << "heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.heading_error);
    s << indent << "linear_v_x: ";
    Printer<double>::stream(s, indent + "  ", v.linear_v_x);
    s << indent << "linear_v_y: ";
    Printer<double>::stream(s, indent + "  ", v.linear_v_y);
    s << indent << "linear_v_z: ";
    Printer<double>::stream(s, indent + "  ", v.linear_v_z);
    s << indent << "angular_v_x: ";
    Printer<double>::stream(s, indent + "  ", v.angular_v_x);
    s << indent << "angular_v_y: ";
    Printer<double>::stream(s, indent + "  ", v.angular_v_y);
    s << indent << "angular_v_z: ";
    Printer<double>::stream(s, indent + "  ", v.angular_v_z);
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<double>::stream(s, indent + "  ", v.position_z);
    s << indent << "acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.acc_z);
    s << indent << "time_cost: ";
    Printer<float>::stream(s, indent + "  ", v.time_cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSERVER_MSGS_MESSAGE_OBSERVER_H
